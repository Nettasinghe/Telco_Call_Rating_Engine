

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <oraca.h>
#include <sqlcpr.h>
#include <sqlda.h>
#include <sqlca.h>

#include "defines.h"

#ifndef ORA_PROC
#include "db.h"
#include "db_data_containers.h"
#include "r4_cdr.h"
#include <fstream>
#endif


extern rated_cdr *gsm_cdr_block;

/*
	Platform issues
	GNU 2.85 Solaris 2.6 oracle 8.1.5 
	a)	gives core with pointer based array host variables
		EXEC SQL AT rating FOR :rows_to_fetch FETCH c_cdr INTO :a INDICATOR :ind
		when rows_to_fetch > 10 on a moderatly large (2K) data structure
		but the same works on the stack variables

	MSVC 6.0 NT 4.0 oracle 8.0.5
	a)	Give stack overflow for above case when :fetch_size *(datastrcre_size) exceeds a
		finite bound. 
		
		So exprementation has been used to set FETCH_SIZE value to work on both platforms
	Ajit 01-DEC-2000
*/


#define BUF_LEN 	100
#define FETCH_SIZE	1000		


EXEC SQL DECLARE CUSTOMER_CARE DATABASE; 
EXEC SQL DECLARE RATING DATABASE;


EXEC SQL BEGIN DECLARE SECTION;
	char *login_cust_care;
	char *login_rating;
EXEC SQL END DECLARE SECTION;


void sql_error(char *msg)
{
	cout << endl << msg << endl;
	sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
	oraca.orastxt.orastxtc[oraca.orastxt.orastxtl] = '\0';
	oraca.orasfnm.orasfnmc[oraca.orasfnm.orasfnml] = '\0';
	cout << sqlca.sqlerrm.sqlerrmc << endl;
	cout << "in " << oraca.orastxt.orastxtc << endl;
	cout << "on line " << oraca.oraslnr << " of " << oraca.orasfnm.orasfnmc
		<< endl << endl;
	
	//-- Roll back any pending changes and disconnect from Oracle.
	EXEC SQL ROLLBACK RELEASE;
	exit(1);
}


//-- Connect to ORACLE. 
void db_connect_cust_care(char *in_login)
{
	login_cust_care = in_login;  // a pointer assignment, in_login has the space acclocation

    EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error--");
#ifdef DIALOG
    cout<<"\nConnecting to ORACLE Customer care"<<endl; 
#else
	cout<<"\nConnecting to ORACLE Customer care as: "<<login_cust_care<<endl;
#endif
 
    EXEC SQL CONNECT :login_cust_care AT CUSTOMER_CARE;
    cout<<"Connected  to Customer Care "<<endl<<endl; 

}


void db_connect_rating(char *in_login)
{
	login_rating = in_login;  // a pointer assignment, in_login has the space acclocation

    EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error--");
#ifdef DIALOG
    cout<<"\nConnecting to ORACLE Rating "<<endl; 
#else
    cout<<"\nConnecting to ORACLE Rating as: "<<login_rating<<endl; 
#endif

    EXEC SQL CONNECT :login_rating AT rating;
    cout<<"Connected  to Rating "<<endl<<endl; 
}


void db_disconnect_rating()
{
	cout<<"\nORACLE Rating database: DISCONNECT"<<endl;
    EXEC SQL AT rating COMMIT WORK RELEASE; 
}


void db_disconnect_cust_care()
{
	cout<<"\nORACLE Customer Care database: DISCONNECT"<<endl;
	EXEC SQL AT CUSTOMER_CARE COMMIT WORK RELEASE; 
}	


void call_partner_networks::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct network_number 
	{ 
		char	network_id[BUF_LEN]; 
		int 	locale_id; 
		
	} a, *n_n_ptr; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	n_n_ptr = &a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_call_partner_network CURSOR FOR 
		SELECT NETWORK_ID, LOCALE_ID
		FROM R_NETWORKS; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN   c_call_partner_network; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_call_partner_network INTO :n_n_ptr; 
		insert(n_n_ptr->network_id, n_n_ptr->locale_id);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_call_partner_network; 
	
	cout<<setw(8)<<i<<" call partner network's loaded."<<endl;
}


void cdr_files::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct cdr_file_t
	{ 
		char file_name[128];	// varchar2(123)
		int file_id;			// called id_no in table number(9)
	} a[FETCH_SIZE]; 

	struct cdr_file_t_ind
	{ 
		short file_name;		// varchar2(123)
		short file_id;			// called id_no in table number(9)
	} ind[FETCH_SIZE]; 

	int rows_to_fetch, rows_before, rows_this_time; 
	EXEC SQL END DECLARE SECTION;
	
	
	rows_to_fetch = FETCH_SIZE; 	// number of rows in each "batch"  
	rows_before = 0;				// previous value of sqlerrd[2]   
	rows_this_time = FETCH_SIZE; 
	
	
	//--RERATE
	EXEC SQL 
	AT RATING 
	DECLARE c_cdr_file CURSOR FOR 
		SELECT	FILE_NAME,	CDR_FILE_ID_NO
		//--FROM	r_re_rate_dump_files_r4
		FROM	cdr_dump_files
		WHERE RATING_START_DATE IS NULL;
	
	EXEC SQL AT RATING OPEN  c_cdr_file; 
	EXEC SQL WHENEVER NOT FOUND CONTINUE; 
	
	cdr_file_statistics cd;

	while (rows_this_time == rows_to_fetch) 
	{ 
		EXEC SQL  AT RATING  FETCH c_cdr_file INTO :a INDICATOR :ind;		 
		rows_this_time = sqlca.sqlerrd[2] - rows_before; 
		rows_before = sqlca.sqlerrd[2]; 
		
		cd.init();
		for(int i=0; i<rows_this_time; i++)
		{
			cd.file_id = a[i].file_id;			
			insert(a[i].file_name, cd);
		}
	} 
	
	EXEC SQL AT RATING CLOSE c_cdr_file; 
	
	cout<<setw(8)<<rows_before<<" cdr files loaded."<<endl;
}



void cdr_files::db_update(cdr_file_statistics s)
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct cdr_file_t
	{ 
		int valid_cdr_count;					//	number(7)
		int error_count;						//	number(7)
		int bytes_read; 					//	number(9)
		char first_cdr_date[BUF_LEN];				//	varchar2(14)
		char last_cdr_date[BUF_LEN];				//	varchar2(14)
		int rating_duration;
		char rating_start_date[BUF_LEN];	//	varchar2(14)
		
		int id_no;						//	number(9)
	} a; 
	
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL WHENEVER NOT FOUND GOTO nofile;
	
	a.valid_cdr_count = s.valid_cdr_count;
	a.error_count = s.error_count;
	a.bytes_read = s.bytes_read;
	strcpy(a.first_cdr_date, s.first_cdr_date.c_str());
	strcpy(a.last_cdr_date, s.last_cdr_date.c_str());
	a.rating_duration = s.rating_duration;
	strcpy(a.rating_start_date, s.rating_start_date.c_str());
	
	a.id_no = s.file_id;	

	//--RERATE
	EXEC SQL 
	AT RATING 	
	UPDATE cdr_dump_files 
	//--UPDATE	r_re_rate_dump_files_r4
		SET 
		valid_cdr_count 		= :a.valid_cdr_count, 
		error_count 			= :a.error_count,
		bytes_read				= :a.bytes_read,
		first_cdr_date			= to_date(:a.first_cdr_date,'YYYYMMDDHH24MISS'),
		last_cdr_date			= to_date(:a.last_cdr_date,'YYYYMMDDHH24MISS'),
		rating_duration 		= :a.rating_duration,
		rating_start_date		= to_date(:a.rating_start_date,'YYYYMMDDHH24MISS')
		WHERE cdr_file_id_no  = :a.id_no;
	
	EXEC SQL AT RATING COMMIT;
	
	cout<<"\n cdr file id = "<<s.file_id<<" log updated.\n\n"<<endl;
	return;
nofile:
	cout<<"\n <ERROR> file id = "<<s.file_id<<" not found to update.\n\n"<<endl;
}



void cdr_rejects::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct cdr_reject_
	{ 
		int 	file_id;
		int 	file_position;
	} a[FETCH_SIZE]; 

	struct cdr_reject_ind
	{ 
		short 	file_id;
		short 	file_position;
	} ind[FETCH_SIZE]; 

	char t_start[BUF_LEN], t_end[BUF_LEN];
	int i;
	int rows_to_fetch, rows_before, rows_this_time; 
	EXEC SQL END DECLARE SECTION;
	
	strcpy(t_start, start_date.c_str());
	strcpy(t_end, end_date.c_str());
	
	rows_to_fetch = FETCH_SIZE;		// number of rows in each "batch"  
	rows_before = 0;				// previous value of sqlerrd[2]   
	rows_this_time = FETCH_SIZE; 
	
	
	EXEC SQL  AT RATING DECLARE c_rejects CURSOR FOR 
		SELECT FILE_ID, FILE_POS	
		FROM R_RJECTED_CDRS_V WHERE CALL_TIME >= :t_start
		AND CALL_TIME <= :t_end; 
	
	EXEC SQL AT RATING OPEN  c_rejects; 
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE; 
	
	while (rows_this_time == rows_to_fetch) 
	{ 
		EXEC SQL  AT RATING  FETCH c_rejects INTO :a INDICATOR :ind; 
		rows_this_time = sqlca.sqlerrd[2] - rows_before; 
		rows_before = sqlca.sqlerrd[2]; 
		
		for (i=0; i<rows_this_time; i++) 
		{ 
			insert(a[i].file_id, a[i].file_position);
		}
	} 
	
	EXEC SQL AT RATING CLOSE c_rejects; 
	
	cout<<setw(8)<<rows_before<<" rejected cdrs loaded."<<endl;
}



void connections::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct connection
	{ 
		int 	account_no;
		char	client_code[BUF_LEN];
		int 	phone_no;
		char	imsi_no[BUF_LEN]; 
		char	imei_no[BUF_LEN]; 
		char	sim_no[BUF_LEN]; 
		char	group_code[BUF_LEN]; 
		char	package_code[BUF_LEN];
		char	group_rate_plan_id[BUF_LEN];
	} a[FETCH_SIZE]; 

	struct connection_ind
	{ 
		short 	account_no;
		short	client_code;
		short 	phone_no;
		short	imsi_no; 
		short	imei_no; 
		short	sim_no; 
		short	group_code; 
		short	package_code;
		short	group_rate_plan_id;
	} ind[FETCH_SIZE]; 

	int rows_to_fetch, rows_before, rows_this_time; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	rows_to_fetch = FETCH_SIZE; 	// number of rows in each "batch"  
	rows_before = 0;				// previous value of sqlerrd[2]   
	rows_this_time = FETCH_SIZE; 

	//--RERATE
	EXEC SQL  
	AT CUSTOMER_CARE 
		DECLARE c_connection CURSOR FOR 
		SELECT ACCOUNT_NO, CLIENT_CODE, PHONE_NO, 
		IMSI_NO, IMEI_NO, SIM_NO, GROUP_CODE, 
		PACKAGE_CODE, GROUP_RATE_PLAN_ID	
		//--FROM R_RE_RATE_CONNECTIONS_V; 
		FROM R_CONNECTIONS_V; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_connection; 
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE; 

	connection_detail cd;
	
	while (rows_this_time == rows_to_fetch) 
	{ 
		EXEC SQL AT CUSTOMER_CARE FETCH c_connection INTO :a INDICATOR :ind; 
		rows_this_time = sqlca.sqlerrd[2] - rows_before; 
		rows_before = sqlca.sqlerrd[2]; 

		//-- all dialog no's are prefixed with 77 in custcare db hence subtract 77M

		for (i=0; i<rows_this_time; i++) 
		{ 
			cd.account_no			= a[i].account_no;
			cd.client_code			= a[i].client_code;
			cd.phone_no 			= a[i].phone_no-770000000;  
			cd.imei_no				= a[i].imei_no; 
			cd.sim_no				= a[i].sim_no; 
			cd.group_code			= a[i].group_code; 
			cd.package_code 		= a[i].package_code;
			cd.group_rate_plan_id	= a[i].group_rate_plan_id;
			cd.gross_charge_for_run = 0;
			
			insert(a[i].imsi_no, cd );
		}
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_connection; 
	
	cout<<setw(8)<<rows_before<<" connections loaded."<<endl;
}



void fixed_rate_numbers::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct f_r_number 
	{ 
		char  call_partner[BUF_LEN];	// VARCHAR2(12) NOT NULL,
		float unit_rate;				// NUMBER(9,2)	NOT NULL
		int call_type;
	} a, *f_r_n_ptr; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	f_r_n_ptr = &a;
	
	EXEC SQL AT CUSTOMER_CARE DECLARE c_fixed_rate_number CURSOR FOR 
		SELECT CALL_PARTNER, UNIT_RATE, CALL_TYPE
		FROM R_FIXED_RATE_NUMBERS; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_fixed_rate_number; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 
	
	fixed_rate_number_key k;
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_fixed_rate_number INTO :f_r_n_ptr; 
		k.call_partner = f_r_n_ptr->call_partner;
		k.type_of_call = f_r_n_ptr->call_type;
		insert(k, f_r_n_ptr->unit_rate);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_fixed_rate_number; 
	
	cout<<setw(8)<<i<<" fixed rate numbers loaded."<<endl;
}


void historic_imsi::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct h_imsi
	{ 
		char	imsi[BUF_LEN];
		int 	account_no;
		char	start[BUF_LEN];
		char	end[BUF_LEN];
	} a[FETCH_SIZE]; 

	struct h_imsi_ind
	{ 
		short	imsi;
		short 	account_no;
		short	start;
		short	end;
	} ind[FETCH_SIZE]; 

	int rows_to_fetch, rows_before, rows_this_time;
	int i;
	EXEC SQL END DECLARE SECTION;
	
	rows_to_fetch = FETCH_SIZE; 	// number of rows in each "batch"  
	rows_before = 0;				// previous value of sqlerrd[2]   
	rows_this_time = FETCH_SIZE; 
	

	// get all closed out records
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_his_imsi CURSOR FOR 
		SELECT IMSI_NO, ACCOUNT_NO, 
		TO_CHAR(START_DATE,'YYYYMMDDHH24MISS'), 
		TO_CHAR(END_DATE,'YYYYMMDDHH24MISS')
		FROM SIM_NO_HISTORY WHERE END_DATE IS NOT NULL; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_his_imsi; 
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE; 
	
	while (rows_this_time == rows_to_fetch) 
	{ 
		EXEC SQL  AT CUSTOMER_CARE  FETCH c_his_imsi INTO :a INDICATOR :ind; 
		rows_this_time = sqlca.sqlerrd[2] - rows_before; 
		rows_before = sqlca.sqlerrd[2]; 
		
		for (i=0; i<rows_this_time; i++) 
		{
			insert(a[i].imsi, a[i].account_no, a[i].start, a[i].end);
		}
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_his_imsi; 
	
	cout<<setw(8)<<rows_before<<" historic imsis loaded."<<endl;
}



void db_insert_rated_cdr(int cdr_count)
{
	EXEC SQL BEGIN DECLARE SECTION;
	
	static struct db_cdr
	{
		int file_id;								//	number(9)
		int file_pos;								//	number(9)
		int account_no; 							//	number(10)
		int termination_type;						//	number(3)
		float units;								//	number(11,2)
		float charge;								//	number(11,2)
		char call_partner_id[BUF_LEN];				//	varchar2(20)
		int duration;								//	number(9)
		char call_time[BUF_LEN];					//	varchar2(14)
		char ms_location[BUF_LEN];					//	varchar2(20)
		char msc_identity[BUF_LEN]; 				//	varchar2(20)
		int call_type_id;							//	number(3)
		char network_id[BUF_LEN];					//	varchar2(5)
		char bearer_capability[BUF_LEN];			//	varchar2(10)
		int bearer_service; 						//	number(3)
		char rate_rule_id[BUF_LEN]; 				//	varchar2(15)
		int service_type_id;						//	number(3)
		int locale_id;								//	number(3)
		char imsi[BUF_LEN]; 						//	varchar2(20)
		char imei[BUF_LEN]; 						// varchar2(20)
		int result_code;
		char discount_type[BUF_LEN];				// varchar2(1)
		char mcc[BUF_LEN];							// varchar2(5)
		char mnc[BUF_LEN];							// varchar2(3)
		int lac;									// number(5)
		int ci; 									// number(5)
		int part;
		int charging_indicator; 					// number(2)
		char link_information[BUF_LEN];				// varchar2(20)
		float charged_units;						// number(11,2)
	} *a; 
	
	int rows_to_insert;
	
	EXEC SQL END DECLARE SECTION;
	rows_to_insert = cdr_count;
	
	if((a = new db_cdr[CDR_INSERT_BLOCK_SIZE])==NULL)
	{
		cout<<" cant allocate memory for bill insert"<<endl;
		exit(0);
	}
	
	
	char buf[100]; 
	for(int j=0; j<CDR_INSERT_BLOCK_SIZE; j++)
	{
		a[j].file_pos = 0;
	}
	
	for(int i=0; i<rows_to_insert; i++)
	{
		
		a[i].file_id =	gsm_cdr_block[i].file_id; 
		a[i].file_pos = gsm_cdr_block[i].file_pos;
		a[i].account_no = gsm_cdr_block[i].connection_d.account_no;
		
		a[i].termination_type  = gsm_cdr_block[i].call_termination_type;
		
		a[i].units = gsm_cdr_block[i].billing.units;
		a[i].charged_units = gsm_cdr_block[i].billing.charged_units;
		a[i].charge = gsm_cdr_block[i].billing.charge;
		strcpy(a[i].call_partner_id,gsm_cdr_block[i].call_partner_identity.substr(0,20).c_str());
		a[i].duration = gsm_cdr_block[i].call_duration;
		reng_date d=gsm_cdr_block[i].d_circuit_allocation_date;
		reng_time t=gsm_cdr_block[i].d_circuit_allocation_time;
		
		sprintf(buf,"%04d%02d%02d%02d%02d%02d",d.year,d.month,d.day,t.hour,t.min,t.second); 
		strcpy(a[i].call_time, buf);
		
		strcpy(a[i].ms_location, gsm_cdr_block[i].ms_location_identity.substr(0,20).c_str() );									//
		strcpy(a[i].msc_identity, gsm_cdr_block[i].msc_identity.substr(0,20).c_str());	
		a[i].call_type_id = gsm_cdr_block[i].type_of_call; 
		strcpy(a[i].network_id, gsm_cdr_block[i].call_partner_network_id.substr(0,5).c_str());
		strcpy(a[i].bearer_capability, gsm_cdr_block[i].required_bearer_capability.c_str());
		a[i].bearer_service = gsm_cdr_block[i].required_bearer_service;
		strcpy(a[i].rate_rule_id, gsm_cdr_block[i].billing.rate_rule_id.substr(0,20).c_str());
		a[i].service_type_id = gsm_cdr_block[i].required_tele_service;
		a[i].locale_id = gsm_cdr_block[i].origin_of_call_indicator;
		strcpy(a[i].imsi, gsm_cdr_block[i].mobile_subscriber_identity.substr(0,20).c_str());													//
		strcpy(a[i].imei, gsm_cdr_block[i].mobile_station_identity.substr(0,20).c_str());
		a[i].result_code = gsm_cdr_block[i].billing.rate_result;
		strcpy(a[i].discount_type, gsm_cdr_block[i].billing.discount_type.substr(0,1).c_str());
		
		strcpy(a[i].mcc, gsm_cdr_block[i].mcc.c_str());
		strcpy(a[i].mnc, gsm_cdr_block[i].mnc.c_str());
		strcpy(a[i].link_information, gsm_cdr_block[i].link_information.c_str());
		
		a[i].lac = gsm_cdr_block[i].lac;
		a[i].ci = gsm_cdr_block[i].ci;
		a[i].charging_indicator = gsm_cdr_block[i].charging_indicator;
		
		//-- allocate cdr to correct partion
		if(gsm_cdr_block[i].billing.rate_result != R_RATED)
		{
			a[i].part = 3;	//-- unrated
			sprintf(buf,"%d",gsm_cdr_block[i].call_partner_extension);
			string a_s;
			a_s = gsm_cdr_block[i].link_information;
			a_s = a_s + ":";
			a_s = a_s + buf;
			strcpy(a[i].rate_rule_id, a_s.c_str());
		}
		//-- roaming zero & non zero charge cdrs 
		else if (gsm_cdr_block[i].billing.rate_result == R_RATED && gsm_cdr_block[i].rate_group_id == "ROAM") 
			a[i].part = 1;	//-- roaming
		else if (gsm_cdr_block[i].billing.rate_result == R_RATED && a[i].charge == 0)
			a[i].part = 2;	//-- zero charge
		else
			a[i].part = 0;	//-- normal
	} 
	//--RERATE
		//--EXEC SQL  AT RATING FOR :rows_to_insert INSERT INTO R_RE_RATED_CDRS_5 VALUES (:a);
		 EXEC SQL  AT RATING FOR :rows_to_insert INSERT INTO R_RATED_CDR4 VALUES (:a);
		 
	
	EXEC SQL AT RATING COMMIT;
	delete a;
	
}



void network_groups::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct network_member 
	{ 
		char	network_id[BUF_LEN]; 
		char	net_group_id[BUF_LEN]; 
	} a, *nm_ptr; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	nm_ptr=&a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_network_group CURSOR FOR 
		SELECT NETWORK_ID, GROUP_ID
		FROM R_network_members_V; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_network_group; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_network_group INTO :nm_ptr; 
		insert(nm_ptr->network_id, nm_ptr->net_group_id);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_network_group; 
	
	cout<<setw(8)<<i<<" network members loaded."<<endl;
}



void celebration_discounts::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct celebration_discount 
	{ 
		char	discount_id[BUF_LEN];
		int 	account_no;
		float	t_operand;
		int 	t_operator;
		char	cele_date[BUF_LEN];
		char	start_date[BUF_LEN];
		char	end_date[BUF_LEN];
		char	rate_group_id[BUF_LEN]; 
	} a, *c_d_ptr; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	c_d_ptr=&a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_celebration_discount CURSOR FOR 
		SELECT DISCOUNT_ID, ACCOUNT_NO,  OPERAND, OPERATOR, CELE_DATE, START_DATE,
		END_DATE, RATE_GROUP_ID
		FROM R_CELEBRATION_DISCOUNTS_V; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_celebration_discount; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 

	celebration_discount_key k;
	celebration_discount_data d;
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_celebration_discount INTO :c_d_ptr; 
		
		k.account_no=c_d_ptr->account_no;
		k.cele_date.set_date(c_d_ptr->cele_date);
		
		d.discount_id=c_d_ptr->discount_id;
		d.dis_operand=c_d_ptr->t_operand;																																													
		d.dis_operator=(e_operator)c_d_ptr->t_operator;
		d.start_date.set_date(c_d_ptr->start_date);
		d.end_date.set_date(c_d_ptr->end_date);
		d.rate_group_id=c_d_ptr->rate_group_id; 
		
		insert(k,d);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_celebration_discount; 
	
	cout<<setw(8)<<i<<" celebration discounts loaded."<<endl;
}


void cell_groups::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct route
	{ 
		int 	cell_id;
		char	route_group_id[BUF_LEN];
	} a[FETCH_SIZE];
	
	struct route_ind
	{ 
		short 	cell_id;
		short	route_group_id;
	} ind[FETCH_SIZE]; 
 
	int rows_to_fetch, rows_before, rows_this_time; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	rows_to_fetch = FETCH_SIZE; 	// number of rows in each "batch"  
	rows_before = 0;				// previous value of sqlerrd[2]   
	rows_this_time = FETCH_SIZE; 
	
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_routes CURSOR FOR 
		SELECT NVL(CELL_ID,0), NVL(ROUTE_GROUP_ID,'UNDEF')
		FROM R_ROUTES; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_routes; 
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE; 

	cell_group_key cgk;
	
	while (rows_this_time == rows_to_fetch) 
	{ 
		EXEC SQL  AT CUSTOMER_CARE  FETCH c_routes INTO :a INDICATOR :ind; 
		rows_this_time = sqlca.sqlerrd[2] - rows_before; 
		rows_before = sqlca.sqlerrd[2]; 
		
		for (i=0; i<rows_this_time; i++) 
		{ 
			insert(a[i].route_group_id, a[i].cell_id);
		}
	} 
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_routes; 
	
	cout<<setw(8)<<rows_before<<" route groups loaded."<<endl;
}




void discount_numbers::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct discount_number 
	{ 
		char	discount_type_id[BUF_LEN];
		int		account_no;
		char	client_code[BUF_LEN];
		char	network_id[BUF_LEN];
		int		phone_number;
		char	rate_group_id[BUF_LEN]; 
		int		t_operator;
		float	t_operand;
		char	start_date[BUF_LEN];
		char	end_date[BUF_LEN];
	} a, *d_n_ptr; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	d_n_ptr=&a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_discount_number CURSOR FOR 
		SELECT DISCOUNT_TYPE_ID, ACCOUNT_NO, CLIENT_CODE, NETWORK_ID, PHONE_NUMBER,
		RATE_GROUP_ID, OPERATOR, OPERAND,
		TO_CHAR(START_DATE,'YYYYMMDDHH24MISS'), 
		TO_CHAR(END_DATE,'YYYYMMDDHH24MISS')
		FROM R_DISCOUNT_NUMBERS_V; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_discount_number; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 
		
	discount_number_key k;
	discount_number_data d;
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_discount_number INTO :d_n_ptr; 
		
		k.account_no=d_n_ptr->account_no;
		k.phone_number=d_n_ptr->phone_number;
		k.network_id=d_n_ptr->network_id; 
		
		d.discount_type_id=d_n_ptr->discount_type_id;
		d.client_code=d_n_ptr->client_code;
		d.rate_group_id=d_n_ptr->rate_group_id; 
		d.dis_operator=(e_operator)d_n_ptr->t_operator;
		d.dis_operand=d_n_ptr->t_operand;
		d.start_date=d_n_ptr->start_date;
		d.end_date=d_n_ptr->end_date;
		insert(k,d);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_discount_number; 
	
	cout<<setw(8)<<i<<" discount numbers loaded."<<endl;
}




void group_discounts::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct group_discount 
	{ 
		char		orig_group_code[BUF_LEN];
		char		term_group_code[BUF_LEN];
		char		rate_group_id[BUF_LEN];
		int 		t_operator;
		float		t_operand;
	} a, *g_d_ptr; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	g_d_ptr=&a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_group_discount CURSOR FOR 
		SELECT ORIG_GROUP_CODE, TERM_GROUP_CODE, RATE_GROUP_ID,
		OPERATOR, OPERAND 
		FROM R_group_discountS_V; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_group_discount; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 

	group_discount_key k;
	group_discount_data d;
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_group_discount INTO :g_d_ptr;
		
		k.orig_group=g_d_ptr->orig_group_code;
		k.term_group=g_d_ptr->term_group_code;
		
		d.rate_group_id=g_d_ptr->rate_group_id;
		d.dis_operand=g_d_ptr->t_operand;																																													
		d.dis_operator=(e_operator)g_d_ptr->t_operator;
		
		insert(k,d);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_group_discount; 
	
	cout<<setw(8)<<i<<" group discount pairs loaded."<<endl;
}



void holiday_priorities::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct time_band 
	{ 
		char	holiday_date[BUF_LEN]; 
		char	day_id[BUF_LEN];
		int 	priority;
	} a, *hpp; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	hpp=&a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_holiday_priority CURSOR FOR 
		SELECT HOLIDAY_DATE, DAY_ID, PRIORITY
		FROM r_holiday_priorities_v; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_holiday_priority; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 

	holiday_priority_key k;
	
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_holiday_priority INTO :hpp; 
	
		k.day_id=hpp->day_id;
		k.date.set_date(hpp->holiday_date);
		insert(k, hpp->priority);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_holiday_priority; 
	
	cout<<setw(8)<<i<<" holiday priorities loaded."<<endl;
}


void package_services::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct package_service 
	{ 
		float	rental;
		char	service_code[BUF_LEN];
		char	package_code[BUF_LEN];
		char	rate_group_id[BUF_LEN];
	} a, *psp; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	
	psp=&a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_package_service CURSOR FOR 
		SELECT RENTAL, SERVICE_CODE, PACKAGE_CODE,
		RATE_GROUP_ID
		FROM R_PACKAGE_SERVICES_V; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_package_service; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 

	package_services_key k;
	package_services_data d;
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_package_service INTO :psp; 
		
		k.package_code=psp->package_code;
		k.service_code=psp->service_code;
		
		d.rate_group_id=psp->rate_group_id;
		d.rental=psp->rental;
		insert(k,d);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_package_service; 
	
	cout<<setw(8)<<i<<" package services loaded."<<endl;
}


void rate_groups::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct rate_group
	{ 
		char	rate_group_id[BUF_LEN]; 	// not null varchar2(5)
		char	re_rate_group_id[BUF_LEN];	// varchar2(5)
		int 	time_threshold; 			// not null number(3)
	} a, *rgp; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	rgp=&a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_rate_group CURSOR FOR 
		SELECT	RATE_GROUP_ID, RE_RATE_GROUP_ID, TIME_THRESHOLD
		FROM R_RATE_GROUPS_V; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_rate_group; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 
	
	rate_group_data rgd;

	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_rate_group INTO :rgp; 

		rgd.re_rate_group_id = rgp->re_rate_group_id; 
		rgd.time_threshold = rgp->time_threshold; 
		
		insert(rgp->rate_group_id, rgd);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_rate_group; 
	
	cout<<setw(8)<<i<<" rate groups loaded."<<endl;
}


void rates::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct rate 
	{ 
		char	rate_group_id[BUF_LEN];
		char	rate_id[BUF_LEN];
		int 	priority;
		char	default_rate[BUF_LEN];
		char	call_type_id[BUF_LEN];
		char	locale_id[BUF_LEN];
		char	day_id[BUF_LEN];
		char	route_group_id[BUF_LEN];
		char	net_group_id[BUF_LEN];
		char	service_type_id[BUF_LEN];
		char	time_band_group[BUF_LEN];
		char	time_band_type[BUF_LEN];
		char	time_block_id[BUF_LEN];
		char	discount_group_id[BUF_LEN];
		char	unit_rate_id[BUF_LEN];
		int 	unit_duration;
		float	cost_unit;
		int 	billable_duration;
		char	start_date[BUF_LEN];
		char	end_date[BUF_LEN];
		char	start_time[BUF_LEN];
		char	end_time[BUF_LEN];
		int 	call_duration;
	} a, *rp; 
	EXEC SQL END DECLARE SECTION;
	
	int i;
	rp=&a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_rate CURSOR FOR 
		SELECT	RATE_GROUP_ID, RATE_ID, PRIORITY,
		DEFAULT_RATE, CALL_TYPE_ID,
		LOCALE_ID, DAY_ID,
		ROUTE_GROUP_ID, NET_GROUP_ID,				
		SERVICE_TYPE_ID, TIME_BAND_GROUP,				
		TIME_BAND_TYPE, TIME_BLOCK_ID,				
		DISCOUNT_GROUP_ID, UNIT_RATE_ID,
		UNIT_DURATION, COST_UNIT, BILLABLE_DURATION,
		START_DATE,
		END_DATE,
		START_TIME,
		END_TIME,
		CALL_DURATION							 
		FROM R_RATE_RULE_V; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_rate; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_rate INTO :rp; 
		
		rate_key rk;
		rk.rate_group_id=rp->rate_group_id;
		rk.call_type_id=rp->call_type_id; 
		rk.locale_id=rp->locale_id; 
		rk.service_type_id=rp->service_type_id; 
		
		rate_detail rd;
		rd.time_band_group=rp->time_band_group; 
		rd.unit_rate_id=rp->unit_rate_id; 
		rd.default_rate=rp->default_rate; 
		rd.rate_id=rp->rate_id; 
		rd.day_id=rp->day_id;
		rd.priority=rp->priority; 
		rd.route_group_id=rp->route_group_id;
		rd.net_group_id=rp->net_group_id;
		rd.time_band_type=rp->time_band_type;
		rd.time_block_id=rp->time_block_id;
		rd.discount_group_id=rp->discount_group_id;
		rd.unit_duration=rp->unit_duration;
		rd.unit_cost=rp->cost_unit;
		rd.billable_duration=rp->billable_duration;
		
		rd.start_date=rp->start_date; 
		rd.end_date=rp->end_date; 
		rd.active_period.start.set_time(rp->start_time);
		rd.active_period.end.set_time(rp->end_time);
		rd.call_duration=rp->call_duration;
		
		insert(rk,rd);
		
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_rate; 
	
	cout<<setw(8)<<i<<" rate rules loaded."<<endl;
}


void time_discount_bands::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct time_discount_band 
	{ 
		char	band_id[BUF_LEN];
		int 	start_second;
		int 	end_second;
		int 	t_operator;
		float	t_operand;
		char	time_discount_group_id[BUF_LEN]; 
	} a, *tdb_ptr; 
	
	int i;
	EXEC SQL END DECLARE SECTION;
	
	tdb_ptr=&a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_time_discount_band CURSOR FOR 
		SELECT BAND_ID, START_SECOND, END_SECOND, OPERATOR, OPERAND, DISCOUNT_GROUP_ID
		FROM R_TIME_DISCOUNT_BANDS_V; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_time_discount_band; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 

	time_discount_band_data d;
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_time_discount_band INTO :tdb_ptr; 
		
		d.start_second	= tdb_ptr->start_second;
		d.end_second	= tdb_ptr->end_second;
		d.dis_operator	= (e_operator)tdb_ptr->t_operator;
		d.dis_operand	= tdb_ptr->t_operand;
		
		insert(tdb_ptr->time_discount_group_id,d);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_time_discount_band; 
	
	cout<<setw(8)<<i<<" time discount bands loaded."<<endl;
}


void value_added_services::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct value_added_service
	{ 
		int 	account_no;
		char	service_code[BUF_LEN];
		char	rate_group_id[BUF_LEN];
		char	start_date[BUF_LEN];
		char	end_date[BUF_LEN];
	} a[FETCH_SIZE];

	struct value_added_service_ind
	{ 
		short 	account_no;
		short	service_code;
		short	rate_group_id;
		short	start_date;
		short	end_date;
	} ind[FETCH_SIZE];

	int rows_to_fetch, rows_before, rows_this_time, i; 
	EXEC SQL END DECLARE SECTION;
	
	rows_to_fetch = FETCH_SIZE; 	// number of rows in each "batch"  
	rows_before = 0;				// previous value of sqlerrd[2]   
	rows_this_time = FETCH_SIZE; 
	
	
	//--RERATE
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_value_added_service CURSOR FOR 
		SELECT ACCOUNT_NO, SERVICE_CODE, RATE_GROUP_ID,
		START_DATE, END_DATE
		FROM R_VALUE_ADDED_SERVICES_V; 
//--	FROM R_VALUE_ADDED_SERVICES_R_V; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_value_added_service; 
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE; 

	value_added_services_key k;
	value_added_services_data d;
	
	while (rows_this_time == rows_to_fetch) 
	{ 
		EXEC SQL  AT CUSTOMER_CARE  
		FETCH c_value_added_service INTO :a INDICATOR :ind; 
		
		rows_this_time = sqlca.sqlerrd[2] - rows_before; 
		rows_before = sqlca.sqlerrd[2]; 
		
		for (i=0; i<rows_this_time; i++) 
		{ 
			k.account_no=a[i].account_no;
			k.service_code=a[i].service_code;
			
			d.rate_group_id=a[i].rate_group_id;
			d.start_date.set_date(a[i].start_date);
			d.end_date.set_date(a[i].end_date);
			insert(k, d);
		}
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_value_added_service; 
	cout<<setw(8)<<rows_before<<" value added services loaded."<<endl;
}



void roaming_networks::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct network 
	{ 
		char	mcc[BUF_LEN];
		char	mnc[BUF_LEN];
		char	rate_group_id[BUF_LEN];
	} a, *n_w; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	n_w = &a;
	
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_roam_network CURSOR FOR 
		SELECT NVL(MCC,''), NVL(MNC,''), NVL(RATE_GROUP_ID,'')
		FROM GSM_NETWORKS; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_roam_network; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_roam_network INTO :n_w; 
		insert(n_w->mcc, n_w->mnc, n_w->rate_group_id);
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_roam_network; 
	
	cout<<setw(8)<<i<<" roaming networks loaded."<<endl;
}



void historic_package::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct h_package
	{ 
		char	package_code[BUF_LEN];
		int 	account_no;
		char	start[BUF_LEN];
		char	end[BUF_LEN];
	} a[FETCH_SIZE]; 

	struct h_package_ind
	{ 
		short	package_code;
		short 	account_no;
		short	start;
		short	end;
	} ind[FETCH_SIZE]; 

	int rows_to_fetch, rows_before, rows_this_time, i; 

	EXEC SQL END DECLARE SECTION;
	
	rows_to_fetch = FETCH_SIZE; 	// number of rows in each "batch"  
	rows_before = 0;				// previous value of sqlerrd[2]   
	rows_this_time = FETCH_SIZE; 
	
	// get all closed out records
	EXEC SQL  AT CUSTOMER_CARE DECLARE c_his_package CURSOR FOR 
		SELECT PACKAGE_CODE, ACCOUNT_NO, 
		TO_CHAR(START_DATE,'YYYYMMDDHH24MISS'), 
		TO_CHAR(END_DATE,'YYYYMMDDHH24MISS')
		FROM PACKAGE_HISTORY WHERE END_DATE IS NOT NULL; 
	
	EXEC SQL AT CUSTOMER_CARE OPEN  c_his_package; 
	
	EXEC SQL WHENEVER NOT FOUND CONTINUE; 

	historic_package_key k;
	historic_package_data d;
	
	while (rows_this_time == rows_to_fetch) 
	{ 
		EXEC SQL  AT CUSTOMER_CARE  FETCH c_his_package INTO :a INDICATOR :ind; 
		rows_this_time = sqlca.sqlerrd[2] - rows_before; 
		rows_before = sqlca.sqlerrd[2]; 
		
		for (i=0; i<rows_this_time; i++) 
		{
			k.account_no=a[i].account_no;
			d.start=a[i].start;
			d.end = a[i].end;
			d.package_code=a[i].package_code;
			insert(k,d);
		}
	} 
	
	EXEC SQL  AT CUSTOMER_CARE CLOSE c_his_package; 

	cout<<setw(8)<<i<<" historic packages loaded."<<endl;
}

